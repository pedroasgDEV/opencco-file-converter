import argparse
import os

from models.CCO import CCO
from utils.to_txt import TO_TXT
from utils.to_vtk import TO_VTK
from utils.boxplot_graph import BoxplotGraph

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(
        description="This Python project converts .xml files generated by the OpenCCO project "
                    "(https://github.com/OpenCCO-team/OpenCCO) into both .txt and .vtk formats."
    )

    # Required input file
    parser.add_argument("input", type=str, help="Path to .xml input file")
    
    # Optional output files
    parser.add_argument("--txt", nargs="?", const="output.txt", default=None, help="Optional path to .txt output file (default: 'output.txt' if flag is used without value)")
    parser.add_argument("--vtk", nargs="?", const="output.vtk", default=None, help="Optional path to .vtk output file (default: 'output.vtk' if flag is used without value)")
    parser.add_argument("--png", nargs="?", const="output.png", default=None, help="Optional path to the boxplot graph output .png file (default: 'output.png' if the flag is used without a value)")

    # Parse the provided command line arguments
    args = parser.parse_args()

    # Validate input file
    if not os.path.exists(args.input):
        raise FileNotFoundError(f"ERROR: The file '{args.input}' was not found.")

    if not args.input.lower().endswith(".xml"):
        raise ValueError(f"ERROR: The input file must be an .xml file. Given: '{args.input}'")

    # Create an instance of the CCO class using the input .xml file
    cco = CCO(args.input)

    # Handle .txt output file
    if args.txt:
        if not args.txt.lower().endswith(".txt"):
            raise ValueError(f"ERROR: The txt output file must be an .txt file. Given: '{args.txt}'")
        
        to_txt = TO_TXT(cco, args.txt)

    # Handle .vtk output file
    if args.vtk:
        if not args.vtk.lower().endswith(".vtk"):
            raise ValueError(f"ERROR: The vtk output file must be an .vtk file. Given: '{args.vtk}'")
        
        to_vtk = TO_VTK(cco, args.vtk)

    # Handle .png output file
    if args.png:
        if not args.png.lower().endswith(".png"):
            raise ValueError(f"ERROR: The png output file must be an .png file. Given: '{args.png}'")
        
        boxplot = BoxplotGraph(cco, args.png)

if __name__ == '__main__':
    main()
